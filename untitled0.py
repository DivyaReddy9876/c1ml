# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VpQgWrF3SLFAsJta4lrCGw_Uhar2DkII
"""

pwd

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt
import seaborn as sns



data = pd.read_csv("Combined Data.csv", on_bad_lines='skip')

print("Dataset Before Preprocessing:\n", data.head())

# Step 1: Handle missing values
data.fillna(method='ffill', inplace=True)

# Step 2: Encode categorical data
encoder = LabelEncoder()
categorical_columns = data.select_dtypes(include=['object']).columns
for column in categorical_columns:
    data[column] = encoder.fit_transform(data[column])

# Step 3: Normalize numerical features
scaler = StandardScaler()
numerical_columns = data.select_dtypes(include=['int64', 'float64']).columns
data[numerical_columns] = scaler.fit_transform(data[numerical_columns])

print("Dataset After Preprocessing:\n", data.head())

# Split the data
X = data.iloc[:, :-1]  # Features
y = data.iloc[:, -1]   # Target
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Required imports
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import LinearRegression, LogisticRegression
from sklearn.naive_bayes import GaussianNB

# Define models
models = {
    "K-Nearest Neighbors": KNeighborsClassifier(n_neighbors=3),
    "Linear Regression": LinearRegression(),
    "Logistic Regression": LogisticRegression(max_iter=1000),
    "Naive Bayes": GaussianNB()
}

accuracies = {}

# Evaluate each model
for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    if name == "Linear Regression":
        y_pred = np.round(y_pred).astype(int)  # Round predictions for regression
    accuracy = accuracy_score(y_test, y_pred)
    accuracies[name] = accuracy * 100

print(y_train.head())
print(y_train.unique())

# Convert continuous target into discrete bins (e.g., for sentiment analysis or other classifications)
bins = [-np.inf, 0.5, np.inf]  # Define your bins based on the dataset
labels = [0, 1]                # Assign labels to bins
y = pd.cut(y, bins=bins, labels=labels).astype(int)

# Split data again
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Define models separately for regression
regression_models = {
    "Linear Regression": LinearRegression()
}

# Train regression models on continuous target
for name, model in regression_models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    print(f"{name} Regression MSE:", np.mean((y_pred - y_test) ** 2))

# Define classification models
classification_models = {
    "K-Nearest Neighbors": KNeighborsClassifier(n_neighbors=3),
    "Logistic Regression": LogisticRegression(max_iter=1000),
    "Naive Bayes": GaussianNB()
}

# Train classification models
for name, model in classification_models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    print(f"{name} Accuracy:", accuracy)

# Define bins and labels
bins = [-np.inf, -0.5, 0.5, np.inf]  # Example bins: negative, neutral, positive
labels = [0, 1, 2]  # Assign labels: 0=negative, 1=neutral, 2=positive

# Convert to discrete categories
y = pd.cut(y, bins=bins, labels=labels).astype(int)

# Split the data again
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error

# Define regression models
regression_models = {
    "Linear Regression": LinearRegression(),
    "Random Forest Regressor": RandomForestRegressor(random_state=42)
}

# Train and evaluate regression models
for name, model in regression_models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    print(f"{name} Mean Squared Error:", mse)

# Evaluate each model
for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    if name == "Linear Regression":
        y_pred = np.round(y_pred).astype(int)  # Round predictions for regression
    accuracy = accuracy_score(y_test, y_pred)
    accuracies[name] = accuracy * 100

# Plot the accuracies
plt.figure(figsize=(10, 6))
sns.barplot(x=list(accuracies.keys()), y=list(accuracies.values()))
plt.title("Comparison of Algorithm Accuracies")
plt.ylabel("Accuracy Percentage")
plt.xlabel("Algorithms")
plt.show()

# Flask Setup for Frontend Integration
from flask import Flask, render_template, request

app = Flask(__name__)

@app.route('/')
def home():
    return render_template('index.html')
@app.route('/predict', methods=['POST'])
def predict():
    user_input = request.form.values()
    input_data = np.array([float(i) for i in user_input]).reshape(1, -1)
    prediction = models["K-Nearest Neighbors"].predict(input_data)[0]
    return render_template('index.html', prediction_text=f'Prediction: {prediction}')

if __name__ == "__main__":
    app.run(debug=True)

from flask import Flask, request, render_template_string
import numpy as np
from sklearn.neighbors import KNeighborsClassifier

# Define the ML model
model = KNeighborsClassifier(n_neighbors=3)
model.fit([[0, 0], [1, 1]], [0, 1])  # Dummy data for demonstration

# Initialize Flask app
app = Flask(__name__)

html_template = """
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>ML Model Prediction</title>
  <style>
    body { font-family: Arial, sans-serif; text-align: center; margin: 20px; }
    input { margin: 10px; padding: 10px; font-size: 16px; }
    button { padding: 10px 15px; font-size: 16px; }
    #result { margin-top: 20px; font-size: 18px; }
  </style>
</head>
<body>
  <h1>ML Model Prediction</h1>
  <form method="POST" action="/predict">
    <input type="number" name="feature1" placeholder="Feature 1" required>
    <input type="number" name="feature2" placeholder="Feature 2" required>
    <button type="submit">Predict</button>
  </form>
  {% if prediction is not none %}
    <div id="result">Prediction: {{ prediction }}</div>
  {% endif %}
</body>
</html>
"""

@app.route("/", methods=["GET", "POST"])
def home():
    prediction = None
    if request.method == "POST":
        feature1 = float(request.form["feature1"])
        feature2 = float(request.form["feature2"])
        input_data = np.array([feature1, feature2]).reshape(1, -1)
        prediction = model.predict(input_data)[0]
    return render_template_string(html_template, prediction=prediction)

if __name__ == "__main__":
    app.run(port=5001)